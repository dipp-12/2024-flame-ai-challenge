{"metadata":{"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":85210,"databundleVersionId":9748215,"sourceType":"competition"}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":3768.258448,"end_time":"2024-10-23T11:37:03.198797","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-10-23T10:34:14.940349","version":"2.6.0"}},"nbformat_minor":5,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/muhammadnadhifn/2024-flame-ai-challenge-convlstm?scriptVersionId=203071625\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"Copy of version 81 (best score).\n<br>\nAutoregressive model based on ConvLSTM using 5 input window to predict 20 target window.","metadata":{"papermill":{"duration":0.009757,"end_time":"2024-10-23T10:34:17.805236","exception":false,"start_time":"2024-10-23T10:34:17.795479","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# Written by Bassem Akoush\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom tqdm import tqdm  # Import tqdm for progress bar\nfrom matplotlib.animation import FuncAnimation\nfrom IPython.display import Image\n\n\n#### INSTRUCTIONS FOR I/O (PLEASE READ) #######\n# Input data files are available in the read-only \"../input/\" (relative) or '/kaggle/input'(absolute) directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\ninput_path = '/kaggle/input/2024-flame-ai-challenge/dataset/'\noutput_path = '/kaggle/working/'","metadata":{"ExecuteTime":{"end_time":"2024-10-11T06:05:56.291168Z","start_time":"2024-10-11T06:05:51.956604Z"},"papermill":{"duration":14.854606,"end_time":"2024-10-23T10:34:32.669045","exception":false,"start_time":"2024-10-23T10:34:17.814439","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T11:44:26.466166Z","iopub.execute_input":"2024-10-24T11:44:26.466495Z","iopub.status.idle":"2024-10-24T11:44:40.065359Z","shell.execute_reply.started":"2024-10-24T11:44:26.46646Z","shell.execute_reply":"2024-10-24T11:44:40.064571Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"# Load Metadata","metadata":{"papermill":{"duration":0.0144,"end_time":"2024-10-23T10:34:32.700965","exception":false,"start_time":"2024-10-23T10:34:32.686565","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"**Define variable and function for loading train data**","metadata":{"papermill":{"duration":0.00911,"end_time":"2024-10-23T10:34:32.720396","exception":false,"start_time":"2024-10-23T10:34:32.711286","status":"completed"},"tags":[]}},{"cell_type":"code","source":"train_df = pd.read_csv(os.path.join(input_path,'train.csv'))\ntrain_df.head()","metadata":{"ExecuteTime":{"end_time":"2024-10-11T06:05:56.326917Z","start_time":"2024-10-11T06:05:56.300817Z"},"papermill":{"duration":0.048941,"end_time":"2024-10-23T10:34:32.778537","exception":false,"start_time":"2024-10-23T10:34:32.729596","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T11:44:40.066827Z","iopub.execute_input":"2024-10-24T11:44:40.067373Z","iopub.status.idle":"2024-10-24T11:44:40.100115Z","shell.execute_reply.started":"2024-10-24T11:44:40.067337Z","shell.execute_reply":"2024-10-24T11:44:40.099227Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"       id  u  alpha   Nt   Nx  Ny        theta_filename  \\\n0  804025  2     10  150  113  32  theta_K_id804025.dat   \n1  875935  2      5  150  113  32  theta_K_id875935.dat   \n2  930086  6      0  150  113  32  theta_K_id930086.dat   \n3  661713  4      5  150  113  32  theta_K_id661713.dat   \n4  633229  2      0  150  113  32  theta_K_id633229.dat   \n\n            ustar_filename      xi_filename  \n0  ustar_ms-1_id804025.dat  xi_id804025.dat  \n1  ustar_ms-1_id875935.dat  xi_id875935.dat  \n2  ustar_ms-1_id930086.dat  xi_id930086.dat  \n3  ustar_ms-1_id661713.dat  xi_id661713.dat  \n4  ustar_ms-1_id633229.dat  xi_id633229.dat  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>u</th>\n      <th>alpha</th>\n      <th>Nt</th>\n      <th>Nx</th>\n      <th>Ny</th>\n      <th>theta_filename</th>\n      <th>ustar_filename</th>\n      <th>xi_filename</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>804025</td>\n      <td>2</td>\n      <td>10</td>\n      <td>150</td>\n      <td>113</td>\n      <td>32</td>\n      <td>theta_K_id804025.dat</td>\n      <td>ustar_ms-1_id804025.dat</td>\n      <td>xi_id804025.dat</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>875935</td>\n      <td>2</td>\n      <td>5</td>\n      <td>150</td>\n      <td>113</td>\n      <td>32</td>\n      <td>theta_K_id875935.dat</td>\n      <td>ustar_ms-1_id875935.dat</td>\n      <td>xi_id875935.dat</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>930086</td>\n      <td>6</td>\n      <td>0</td>\n      <td>150</td>\n      <td>113</td>\n      <td>32</td>\n      <td>theta_K_id930086.dat</td>\n      <td>ustar_ms-1_id930086.dat</td>\n      <td>xi_id930086.dat</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>661713</td>\n      <td>4</td>\n      <td>5</td>\n      <td>150</td>\n      <td>113</td>\n      <td>32</td>\n      <td>theta_K_id661713.dat</td>\n      <td>ustar_ms-1_id661713.dat</td>\n      <td>xi_id661713.dat</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>633229</td>\n      <td>2</td>\n      <td>0</td>\n      <td>150</td>\n      <td>113</td>\n      <td>32</td>\n      <td>theta_K_id633229.dat</td>\n      <td>ustar_ms-1_id633229.dat</td>\n      <td>xi_id633229.dat</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"def load_dataX(idx):\n    csv_file = train_df.reset_index().to_dict(orient='list')\n    dir_path = os.path.join(input_path, \"train\")\n    id = csv_file['id'][idx]\n    nt, Nx, Ny = csv_file['Nt'][idx], csv_file['Nx'][idx], csv_file['Ny'][idx]\n    \n    # Load data for all channels\n    theta = np.fromfile(os.path.join(dir_path, csv_file['theta_filename'][idx]), dtype=\"<f4\").reshape(nt, Nx, Ny)\n    ustar = np.fromfile(os.path.join(dir_path, csv_file['ustar_filename'][idx]), dtype=\"<f4\").reshape(nt, Nx, Ny)\n    xi_f = np.fromfile(os.path.join(dir_path, csv_file['xi_filename'][idx]), dtype=\"<f4\").reshape(nt, Nx, Ny)\n    \n    # Other parameters\n    uin = np.full_like(theta, np.array(csv_file['u'][idx]))\n    alpha = np.full_like(theta, np.array(csv_file['alpha'][idx]))\n    \n    # Stack all features together\n    X = np.stack([xi_f, theta, ustar, uin, alpha], axis=-1)\n    \n    return X","metadata":{"ExecuteTime":{"end_time":"2024-10-11T06:05:56.335998Z","start_time":"2024-10-11T06:05:56.329039Z"},"editable":true,"papermill":{"duration":0.029259,"end_time":"2024-10-23T10:34:32.8184","exception":false,"start_time":"2024-10-23T10:34:32.789141","status":"completed"},"slideshow":{"slide_type":""},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T11:44:40.101385Z","iopub.execute_input":"2024-10-24T11:44:40.101728Z","iopub.status.idle":"2024-10-24T11:44:40.110406Z","shell.execute_reply.started":"2024-10-24T11:44:40.101695Z","shell.execute_reply":"2024-10-24T11:44:40.109545Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"This code load all data and create min max values for each channel for normalization. Normalization will be done by scaling the values within range 0 to 1 and calculate separately for each channel or features data.","metadata":{"papermill":{"duration":0.011978,"end_time":"2024-10-23T10:34:32.841962","exception":false,"start_time":"2024-10-23T10:34:32.829984","status":"completed"},"tags":[]}},{"cell_type":"code","source":"all_data = []\n\nfor idx in range(len(train_df)):\n    all_data.append(load_dataX(idx))\n    \nall_data = np.array(all_data)","metadata":{"ExecuteTime":{"end_time":"2024-10-11T06:05:56.976836Z","start_time":"2024-10-11T06:05:56.340006Z"},"papermill":{"duration":0.979459,"end_time":"2024-10-23T10:34:33.832382","exception":false,"start_time":"2024-10-23T10:34:32.852923","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T11:44:40.112868Z","iopub.execute_input":"2024-10-24T11:44:40.113583Z","iopub.status.idle":"2024-10-24T11:44:40.948541Z","shell.execute_reply.started":"2024-10-24T11:44:40.113541Z","shell.execute_reply":"2024-10-24T11:44:40.947558Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Get the number of channels\nnum_channels = all_data.shape[-1]\n\nmin_max_values = {}\n\nfor channel in range(num_channels):\n    min_val = np.min(all_data[:, :, :, :, channel])\n    max_val = np.max(all_data[:, :, :, :, channel])\n    min_max_values[channel] = {'min': min_val, 'max': max_val}\n\ndel all_data","metadata":{"ExecuteTime":{"end_time":"2024-10-11T06:05:56.986885Z","start_time":"2024-10-11T06:05:56.979121Z"},"papermill":{"duration":0.104947,"end_time":"2024-10-23T10:34:33.94651","exception":false,"start_time":"2024-10-23T10:34:33.841563","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T11:44:40.949805Z","iopub.execute_input":"2024-10-24T11:44:40.950199Z","iopub.status.idle":"2024-10-24T11:44:41.045955Z","shell.execute_reply.started":"2024-10-24T11:44:40.950154Z","shell.execute_reply":"2024-10-24T11:44:41.044978Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"min_max_values","metadata":{"ExecuteTime":{"end_time":"2024-10-11T06:05:56.99473Z","start_time":"2024-10-11T06:05:56.989044Z"},"papermill":{"duration":0.018773,"end_time":"2024-10-23T10:34:33.974446","exception":false,"start_time":"2024-10-23T10:34:33.955673","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T11:44:41.047222Z","iopub.execute_input":"2024-10-24T11:44:41.047611Z","iopub.status.idle":"2024-10-24T11:44:41.054499Z","shell.execute_reply.started":"2024-10-24T11:44:41.047571Z","shell.execute_reply":"2024-10-24T11:44:41.053608Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"{0: {'min': 0.0, 'max': 1.0},\n 1: {'min': 249.68156, 'max': 668.0308},\n 2: {'min': -4.351627, 'max': 31.671425},\n 3: {'min': 2.0, 'max': 6.0},\n 4: {'min': 0.0, 'max': 10.0}}"},"metadata":{}}]},{"cell_type":"markdown","source":"# Create Dataset","metadata":{"papermill":{"duration":0.00884,"end_time":"2024-10-23T10:34:33.992396","exception":false,"start_time":"2024-10-23T10:34:33.983556","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"This code creates a dataset for a deep learning model using time-series data with multiple spatial and channel dimensions. The goal is to generate input-output pairs from a 5-dimensional dataset, X, which has dimensions (n, time, Nx, Ny, c), where:\n\nn: The number of sample data.<br>\ntime: The number of time steps in the dataset.<br>\nNx and Ny: The spatial dimensions of each time step.<br>\nc: The number of channels for each spatial point.<br>","metadata":{"papermill":{"duration":0.009197,"end_time":"2024-10-23T10:34:34.010555","exception":false,"start_time":"2024-10-23T10:34:34.001358","status":"completed"},"tags":[]}},{"cell_type":"code","source":"def create_dataset(X, window_size=1, window_target=1):\n    num_samples = X.shape[0] - (window_size+window_target)  # Number of samples you can create\n    Nx, Ny, c = X.shape[1:4]  # Get the spatial dimensions and number of channels\n\n    X_data = []\n    y_data = []\n    y_target = []\n\n    for i in range(num_samples):\n        # Input is all channels at time t\n        X_seq = X[i:i+window_size, :, :, :]  # (Nx, Ny, c) at time t\n        X_data.append(X_seq)\n\n        # Target is all channels at time t+1\n        y_seq = X[i+window_size:(i+window_size)+window_target, :, :, :]  # (Nx, Ny, c) at time t+1\n        y_data.append(y_seq)\n\n    return np.array(X_data), np.array(y_data)\n\n# Example: Iterate over all training examples\nall_X_data = []\nall_y_data = []\n\nfor idx in range(len(train_df)):\n    X = load_dataX(idx)  # Load the data for the current index\n    num_channels = X.shape[-1]\n    # Normalize each channel independently\n    for channel in range(num_channels):\n        min_val = min_max_values[channel]['min']\n        max_val = min_max_values[channel]['max']\n        X[:, :, :, channel] = (X[:, :, :, channel] - min_val) / (max_val - min_val + 1e-6)  # Add a small constant to avoid division by zero\n    X_seq, y_seq = create_dataset(X, window_size=5, window_target=20)  # Create inputs and targets\n    \n    all_X_data.append(X_seq)  # Append to the overall dataset\n    all_y_data.append(y_seq)\n\n# Concatenate all data into final arrays\nall_X_data = np.concatenate(all_X_data, axis=0)\nall_y_data = np.concatenate(all_y_data, axis=0)\n\nprint(\"Final Input shape:\", all_X_data.shape)  # (num_samples, Nx, Ny, c)\nprint(\"Final Target shape:\", all_y_data.shape)  # (num_samples, Nx, Ny, c)","metadata":{"ExecuteTime":{"end_time":"2024-10-11T06:05:58.313122Z","start_time":"2024-10-11T06:05:56.996916Z"},"papermill":{"duration":1.409134,"end_time":"2024-10-23T10:34:35.428667","exception":false,"start_time":"2024-10-23T10:34:34.019533","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T11:44:41.05571Z","iopub.execute_input":"2024-10-24T11:44:41.056104Z","iopub.status.idle":"2024-10-24T11:44:42.419286Z","shell.execute_reply.started":"2024-10-24T11:44:41.056056Z","shell.execute_reply":"2024-10-24T11:44:42.418383Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Final Input shape: (1125, 5, 113, 32, 5)\nFinal Target shape: (1125, 20, 113, 32, 5)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Modelling","metadata":{"papermill":{"duration":0.009036,"end_time":"2024-10-23T10:34:35.447185","exception":false,"start_time":"2024-10-23T10:34:35.438149","status":"completed"},"tags":[]}},{"cell_type":"code","source":"def create_model():\n    inputs = layers.Input(shape=(5, 113, 32, 5))  # Input shape: (time_steps, Nx, Ny, channels)\n    \n    # Encoder ConvLSTM layers for input sequence (5 time steps, 5 channels)\n    x = layers.ConvLSTM2D(32, (3, 3), padding='same', return_sequences=True)(inputs)\n    \n    # Stack more ConvLSTM layers (optional)\n    x = layers.ConvLSTM2D(64, (3, 3), padding='same', return_sequences=True)(x)\n    x = layers.ConvLSTM2D(128, (3, 3), padding='same', return_sequences=False)(x)\n\n    \n    # Reshape the 4D output (batch_size, height, width, channels) to 2D (batch_size, features)\n    x = layers.Reshape((113 * 32 * 128,))(x)  # Flatten the spatial dimensions\n    \n    # Use RepeatVector to expand the time dimension from 5 to 20\n    x = layers.RepeatVector(20)(x)  # Now the shape is (batch_size, 20, features)\n    \n    # Reshape back to 4D (batch_size, time_steps, height, width, channels)\n    x = layers.Reshape((20, 113, 32, 128))(x)  # Reshape to match the time steps and spatial dims\n    \n    # Decoder ConvLSTM layer for generating 20 time steps of output\n    x = layers.ConvLSTM2D(64, (3, 3), padding='same', return_sequences=True)(x)\n    x = layers.ConvLSTM2D(32, (3, 3), padding='same', return_sequences=True)(x)\n    \n    # Since channel 4 & 5 always same, were not predicting them\n    # Final TimeDistributed Conv2D to generate the output with (113, 32, 3) spatial dimensions (3 channels)\n    output_features = layers.TimeDistributed(layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same'))(x) # 3 output channels\n    \n    # Create a tensor for the fourth and fifth channels from the input\n    skip_channel = layers.Lambda(lambda x: x[:, :, :, :, 3:5])(inputs)  # Take channels 4 and 5 from the input\n    \n    # Repeat the skip channels to match the output features' time steps\n    skip_channel = layers.Lambda(lambda x: tf.repeat(x, repeats=4, axis=1))(skip_channel)\n\n    # Concatenate with the repeated skip channel\n    outputs = layers.Concatenate(axis=-1)([output_features, skip_channel])\n    \n    # Create and compile the model\n    model = models.Model(inputs=inputs, outputs=outputs)\n    model.compile(optimizer='adam', loss='mse')\n    return model\n    \nmodel = create_model()\nmodel.summary()","metadata":{"ExecuteTime":{"end_time":"2024-10-11T06:06:00.122027Z","start_time":"2024-10-11T06:05:58.31528Z"},"papermill":{"duration":1.403483,"end_time":"2024-10-23T10:34:36.859882","exception":false,"start_time":"2024-10-23T10:34:35.456399","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T11:44:42.420502Z","iopub.execute_input":"2024-10-24T11:44:42.420789Z","iopub.status.idle":"2024-10-24T11:44:43.783013Z","shell.execute_reply.started":"2024-10-24T11:44:42.420758Z","shell.execute_reply":"2024-10-24T11:44:43.78213Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ input_layer         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m113\u001b[0m,    │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m5\u001b[0m)            │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ conv_lstm2d         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m113\u001b[0m,    │     \u001b[38;5;34m42,752\u001b[0m │ input_layer[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n│ (\u001b[38;5;33mConvLSTM2D\u001b[0m)        │ \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m)           │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ conv_lstm2d_1       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m113\u001b[0m,    │    \u001b[38;5;34m221,440\u001b[0m │ conv_lstm2d[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n│ (\u001b[38;5;33mConvLSTM2D\u001b[0m)        │ \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m64\u001b[0m)           │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ conv_lstm2d_2       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m113\u001b[0m, \u001b[38;5;34m32\u001b[0m,   │    \u001b[38;5;34m885,248\u001b[0m │ conv_lstm2d_1[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mConvLSTM2D\u001b[0m)        │ \u001b[38;5;34m128\u001b[0m)              │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ reshape (\u001b[38;5;33mReshape\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m462848\u001b[0m)    │          \u001b[38;5;34m0\u001b[0m │ conv_lstm2d_2[\u001b[38;5;34m0\u001b[0m]… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ repeat_vector       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m,        │          \u001b[38;5;34m0\u001b[0m │ reshape[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n│ (\u001b[38;5;33mRepeatVector\u001b[0m)      │ \u001b[38;5;34m462848\u001b[0m)           │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ reshape_1 (\u001b[38;5;33mReshape\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m113\u001b[0m,   │          \u001b[38;5;34m0\u001b[0m │ repeat_vector[\u001b[38;5;34m0\u001b[0m]… │\n│                     │ \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m128\u001b[0m)          │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ conv_lstm2d_3       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m113\u001b[0m,   │    \u001b[38;5;34m442,624\u001b[0m │ reshape_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n│ (\u001b[38;5;33mConvLSTM2D\u001b[0m)        │ \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m64\u001b[0m)           │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ conv_lstm2d_4       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m113\u001b[0m,   │    \u001b[38;5;34m110,720\u001b[0m │ conv_lstm2d_3[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mConvLSTM2D\u001b[0m)        │ \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m)           │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lambda (\u001b[38;5;33mLambda\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m113\u001b[0m,    │          \u001b[38;5;34m0\u001b[0m │ input_layer[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n│                     │ \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m2\u001b[0m)            │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ time_distributed    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m113\u001b[0m,   │        \u001b[38;5;34m867\u001b[0m │ conv_lstm2d_4[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mTimeDistributed\u001b[0m)   │ \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m3\u001b[0m)            │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lambda_1 (\u001b[38;5;33mLambda\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m113\u001b[0m,   │          \u001b[38;5;34m0\u001b[0m │ lambda[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n│                     │ \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m2\u001b[0m)            │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ concatenate         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m113\u001b[0m,   │          \u001b[38;5;34m0\u001b[0m │ time_distributed… │\n│ (\u001b[38;5;33mConcatenate\u001b[0m)       │ \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m5\u001b[0m)            │            │ lambda_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ input_layer         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>,    │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)            │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ conv_lstm2d         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>,    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">42,752</span> │ input_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ConvLSTM2D</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)           │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ conv_lstm2d_1       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>,    │    <span style=\"color: #00af00; text-decoration-color: #00af00\">221,440</span> │ conv_lstm2d[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ConvLSTM2D</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)           │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ conv_lstm2d_2       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>,   │    <span style=\"color: #00af00; text-decoration-color: #00af00\">885,248</span> │ conv_lstm2d_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ConvLSTM2D</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)              │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ reshape (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Reshape</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">462848</span>)    │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ conv_lstm2d_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ repeat_vector       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>,        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ reshape[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">RepeatVector</span>)      │ <span style=\"color: #00af00; text-decoration-color: #00af00\">462848</span>)           │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ reshape_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Reshape</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>,   │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ repeat_vector[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│                     │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)          │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ conv_lstm2d_3       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>,   │    <span style=\"color: #00af00; text-decoration-color: #00af00\">442,624</span> │ reshape_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ConvLSTM2D</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)           │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ conv_lstm2d_4       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>,   │    <span style=\"color: #00af00; text-decoration-color: #00af00\">110,720</span> │ conv_lstm2d_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ConvLSTM2D</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)           │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lambda (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>,    │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n│                     │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)            │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ time_distributed    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>,   │        <span style=\"color: #00af00; text-decoration-color: #00af00\">867</span> │ conv_lstm2d_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TimeDistributed</span>)   │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)            │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lambda_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>,   │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lambda[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n│                     │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)            │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ concatenate         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">113</span>,   │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ time_distributed… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)       │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)            │            │ lambda_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,703,651\u001b[0m (6.50 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,703,651</span> (6.50 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,703,651\u001b[0m (6.50 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,703,651</span> (6.50 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"early_stopping = EarlyStopping(monitor='val_loss',\n                               mode='min',\n                               patience=7,\n                               restore_best_weights=True,\n                               min_delta=0.00001)\n\nreduce_lr = ReduceLROnPlateau(monitor='val_loss',\n                              factor=0.2,\n                              patience=5,\n                              min_lr=1e-6,\n                              min_delta=0.00001)\n\nhistory = model.fit(all_X_data, all_y_data, \n                    epochs=1000,\n                    batch_size=8, \n                    callbacks=[early_stopping, reduce_lr],\n                    verbose=2, \n                    shuffle=True,\n                    validation_split=0.2)\n\n# Load model (optional, if model already trained)\n# model.load_weights('model_weights.weights.h5')","metadata":{"ExecuteTime":{"end_time":"2024-10-11T06:10:02.37451Z","start_time":"2024-10-11T06:06:00.123832Z"},"papermill":{"duration":3698.500622,"end_time":"2024-10-23T11:36:15.371133","exception":false,"start_time":"2024-10-23T10:34:36.870511","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T11:44:43.784121Z","iopub.execute_input":"2024-10-24T11:44:43.784405Z","iopub.status.idle":"2024-10-24T12:24:02.554785Z","shell.execute_reply.started":"2024-10-24T11:44:43.784374Z","shell.execute_reply":"2024-10-24T12:24:02.553816Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Epoch 1/1000\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1729770295.894457      93 service.cc:145] XLA service 0x55f6c1203340 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1729770295.894544      93 service.cc:153]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1729770305.506921      93 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'loop_multiply_fusion_3', 8 bytes spill stores, 8 bytes spill loads\n\nI0000 00:00:1729770305.530643      93 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\nI0000 00:00:1729770357.159870      92 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'loop_multiply_fusion_5', 8 bytes spill stores, 8 bytes spill loads\n\n","output_type":"stream"},{"name":"stdout","text":"113/113 - 80s - 710ms/step - loss: 0.0096 - val_loss: 0.0122 - learning_rate: 0.0010\nEpoch 2/1000\n113/113 - 46s - 411ms/step - loss: 0.0071 - val_loss: 0.0100 - learning_rate: 0.0010\nEpoch 3/1000\n113/113 - 46s - 411ms/step - loss: 0.0071 - val_loss: 0.0100 - learning_rate: 0.0010\nEpoch 4/1000\n113/113 - 46s - 411ms/step - loss: 0.0070 - val_loss: 0.0094 - learning_rate: 0.0010\nEpoch 5/1000\n113/113 - 46s - 411ms/step - loss: 0.0070 - val_loss: 0.0115 - learning_rate: 0.0010\nEpoch 6/1000\n113/113 - 46s - 411ms/step - loss: 0.0070 - val_loss: 0.0103 - learning_rate: 0.0010\nEpoch 7/1000\n113/113 - 46s - 411ms/step - loss: 0.0070 - val_loss: 0.0101 - learning_rate: 0.0010\nEpoch 8/1000\n113/113 - 46s - 411ms/step - loss: 0.0071 - val_loss: 0.0105 - learning_rate: 0.0010\nEpoch 9/1000\n113/113 - 46s - 411ms/step - loss: 0.0067 - val_loss: 0.0091 - learning_rate: 0.0010\nEpoch 10/1000\n113/113 - 46s - 411ms/step - loss: 0.0057 - val_loss: 0.0090 - learning_rate: 0.0010\nEpoch 11/1000\n113/113 - 46s - 411ms/step - loss: 0.0045 - val_loss: 0.0063 - learning_rate: 0.0010\nEpoch 12/1000\n113/113 - 46s - 411ms/step - loss: 0.0039 - val_loss: 0.0060 - learning_rate: 0.0010\nEpoch 13/1000\n113/113 - 46s - 411ms/step - loss: 0.0034 - val_loss: 0.0069 - learning_rate: 0.0010\nEpoch 14/1000\n113/113 - 46s - 411ms/step - loss: 0.0031 - val_loss: 0.0050 - learning_rate: 0.0010\nEpoch 15/1000\n113/113 - 46s - 411ms/step - loss: 0.0029 - val_loss: 0.0045 - learning_rate: 0.0010\nEpoch 16/1000\n113/113 - 46s - 411ms/step - loss: 0.0028 - val_loss: 0.0046 - learning_rate: 0.0010\nEpoch 17/1000\n113/113 - 46s - 411ms/step - loss: 0.0027 - val_loss: 0.0045 - learning_rate: 0.0010\nEpoch 18/1000\n113/113 - 46s - 411ms/step - loss: 0.0027 - val_loss: 0.0040 - learning_rate: 0.0010\nEpoch 19/1000\n113/113 - 46s - 411ms/step - loss: 0.0026 - val_loss: 0.0045 - learning_rate: 0.0010\nEpoch 20/1000\n113/113 - 46s - 411ms/step - loss: 0.0027 - val_loss: 0.0040 - learning_rate: 0.0010\nEpoch 21/1000\n113/113 - 46s - 411ms/step - loss: 0.0026 - val_loss: 0.0040 - learning_rate: 0.0010\nEpoch 22/1000\n113/113 - 46s - 411ms/step - loss: 0.0026 - val_loss: 0.0038 - learning_rate: 0.0010\nEpoch 23/1000\n113/113 - 46s - 411ms/step - loss: 0.0026 - val_loss: 0.0039 - learning_rate: 0.0010\nEpoch 24/1000\n113/113 - 46s - 411ms/step - loss: 0.0025 - val_loss: 0.0039 - learning_rate: 0.0010\nEpoch 25/1000\n113/113 - 46s - 411ms/step - loss: 0.0025 - val_loss: 0.0041 - learning_rate: 0.0010\nEpoch 26/1000\n113/113 - 46s - 411ms/step - loss: 0.0025 - val_loss: 0.0037 - learning_rate: 0.0010\nEpoch 27/1000\n113/113 - 46s - 411ms/step - loss: 0.0025 - val_loss: 0.0038 - learning_rate: 0.0010\nEpoch 28/1000\n113/113 - 46s - 411ms/step - loss: 0.0025 - val_loss: 0.0040 - learning_rate: 0.0010\nEpoch 29/1000\n113/113 - 46s - 411ms/step - loss: 0.0025 - val_loss: 0.0037 - learning_rate: 0.0010\nEpoch 30/1000\n113/113 - 46s - 411ms/step - loss: 0.0025 - val_loss: 0.0037 - learning_rate: 0.0010\nEpoch 31/1000\n113/113 - 46s - 411ms/step - loss: 0.0025 - val_loss: 0.0036 - learning_rate: 0.0010\nEpoch 32/1000\n113/113 - 46s - 411ms/step - loss: 0.0025 - val_loss: 0.0039 - learning_rate: 0.0010\nEpoch 33/1000\n113/113 - 46s - 411ms/step - loss: 0.0025 - val_loss: 0.0038 - learning_rate: 0.0010\nEpoch 34/1000\n113/113 - 46s - 411ms/step - loss: 0.0024 - val_loss: 0.0037 - learning_rate: 0.0010\nEpoch 35/1000\n113/113 - 46s - 411ms/step - loss: 0.0024 - val_loss: 0.0038 - learning_rate: 0.0010\nEpoch 36/1000\n113/113 - 46s - 411ms/step - loss: 0.0024 - val_loss: 0.0037 - learning_rate: 0.0010\nEpoch 37/1000\n113/113 - 46s - 411ms/step - loss: 0.0024 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 38/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 39/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 40/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 41/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 42/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 43/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0035 - learning_rate: 2.0000e-04\nEpoch 44/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 45/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 46/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 47/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 48/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 2.0000e-04\nEpoch 49/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 4.0000e-05\nEpoch 50/1000\n113/113 - 46s - 411ms/step - loss: 0.0023 - val_loss: 0.0036 - learning_rate: 4.0000e-05\n","output_type":"stream"}]},{"cell_type":"code","source":"model.save_weights('model_weights.weights.h5')","metadata":{"papermill":{"duration":0.106118,"end_time":"2024-10-23T11:36:15.49863","exception":false,"start_time":"2024-10-23T11:36:15.392512","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T12:24:02.564367Z","iopub.execute_input":"2024-10-24T12:24:02.56469Z","iopub.status.idle":"2024-10-24T12:24:02.646214Z","shell.execute_reply.started":"2024-10-24T12:24:02.564656Z","shell.execute_reply":"2024-10-24T12:24:02.645393Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# Plotting training & validation loss values\nplt.figure(figsize=(10, 5))\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend()\nplt.grid()\nplt.show()","metadata":{"papermill":{"duration":0.343752,"end_time":"2024-10-23T11:36:15.86378","exception":false,"start_time":"2024-10-23T11:36:15.520028","status":"completed"},"tags":[],"jupyter":{"source_hidden":true},"execution":{"iopub.status.busy":"2024-10-24T12:24:02.652799Z","iopub.execute_input":"2024-10-24T12:24:02.653078Z","iopub.status.idle":"2024-10-24T12:24:02.977249Z","shell.execute_reply.started":"2024-10-24T12:24:02.653046Z","shell.execute_reply":"2024-10-24T12:24:02.976323Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Evaluate","metadata":{"papermill":{"duration":0.021678,"end_time":"2024-10-23T11:36:15.90758","exception":false,"start_time":"2024-10-23T11:36:15.885902","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"**Evalueate MSE and MAE for fire line prediction**","metadata":{"papermill":{"duration":0.021538,"end_time":"2024-10-23T11:36:15.951563","exception":false,"start_time":"2024-10-23T11:36:15.930025","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# Assume all_X_data and all_y_data are already defined\nn_sample = 100\nn_steps = 1\n\n# Initialize variables to accumulate errors\ntotal_mse = 0\ntotal_mae = 0\n\n# Use tqdm to display a progress bar for the loop\nfor idx in tqdm(range(n_sample), desc=\"Processing Samples\"):\n    input_x = all_X_data[idx]\n    y_target = all_y_data[idx:idx+n_steps, :, :, :, 0]  # Get the true target sequence\n    y_pred = []\n\n    for i in range(n_steps):\n        pred = model.predict(tf.expand_dims(input_x, axis=0), verbose=0)\n        input_x = pred[0]         # Insert the new prediction at the end\n        y_pred.append(pred[0,:,:,:,0])\n\n    # Flatten arrays to compare them correctly\n    y_pred = np.array(y_pred).flatten()\n    y_target = y_target.flatten()\n\n    # Calculate MSE and MAE for the current sample\n    mse = mean_squared_error(y_target, y_pred)\n    mae = mean_absolute_error(y_target, y_pred)\n\n    # Accumulate the errors\n    total_mse += mse\n    total_mae += mae\n\n# Calculate the average MSE and MAE across all samples\naverage_mse = total_mse / n_sample\naverage_mae = total_mae / n_sample\n\nprint(\"Average MSE:\", average_mse) # 0.02406\nprint(\"Average MAE:\", average_mae) # 0.04567","metadata":{"papermill":{"duration":10.727866,"end_time":"2024-10-23T11:36:26.701255","exception":false,"start_time":"2024-10-23T11:36:15.973389","status":"completed"},"tags":[],"jupyter":{"source_hidden":true},"execution":{"iopub.status.busy":"2024-10-24T12:24:02.981156Z","iopub.execute_input":"2024-10-24T12:24:02.981459Z","iopub.status.idle":"2024-10-24T12:24:13.557252Z","shell.execute_reply.started":"2024-10-24T12:24:02.981427Z","shell.execute_reply":"2024-10-24T12:24:13.556243Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stderr","text":"Processing Samples: 100%|██████████| 100/100 [00:10<00:00,  9.47it/s]","output_type":"stream"},{"name":"stdout","text":"Average MSE: 0.008078252607956528\nAverage MAE: 0.016903079091571273\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Comparing fire line prediction with the ground truth**","metadata":{"papermill":{"duration":0.025806,"end_time":"2024-10-23T11:36:26.753003","exception":false,"start_time":"2024-10-23T11:36:26.727197","status":"completed"},"tags":[]}},{"cell_type":"code","source":"channel_to_view = 0  # 0 -> fire line\nn_time = 12 \nidx_to_view = 111","metadata":{"papermill":{"duration":0.03275,"end_time":"2024-10-23T11:36:26.811382","exception":false,"start_time":"2024-10-23T11:36:26.778632","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T12:24:13.558467Z","iopub.execute_input":"2024-10-24T12:24:13.558754Z","iopub.status.idle":"2024-10-24T12:24:13.563431Z","shell.execute_reply.started":"2024-10-24T12:24:13.558722Z","shell.execute_reply":"2024-10-24T12:24:13.56252Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"plt.imshow(all_y_data[idx_to_view, n_time, :, :, channel_to_view])\nplt.show()\n\ny_pred = model.predict(tf.expand_dims(all_X_data[idx_to_view], axis=0))\nplt.imshow(y_pred[0, n_time, :, :, channel_to_view])\nplt.show()","metadata":{"papermill":{"duration":0.480601,"end_time":"2024-10-23T11:36:27.317505","exception":false,"start_time":"2024-10-23T11:36:26.836904","status":"completed"},"tags":[],"jupyter":{"source_hidden":true},"execution":{"iopub.status.busy":"2024-10-24T12:24:13.564586Z","iopub.execute_input":"2024-10-24T12:24:13.564936Z","iopub.status.idle":"2024-10-24T12:24:14.017253Z","shell.execute_reply.started":"2024-10-24T12:24:13.564895Z","shell.execute_reply":"2024-10-24T12:24:14.016334Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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"},"metadata":{}},{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Prediction","metadata":{"papermill":{"duration":0.025972,"end_time":"2024-10-23T11:36:27.370063","exception":false,"start_time":"2024-10-23T11:36:27.344091","status":"completed"},"tags":[]}},{"cell_type":"code","source":"test_df = pd.read_csv(os.path.join(input_path,'test.csv'))\ntest_df.head()","metadata":{"papermill":{"duration":0.053786,"end_time":"2024-10-23T11:36:27.450311","exception":false,"start_time":"2024-10-23T11:36:27.396525","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T12:24:14.018664Z","iopub.execute_input":"2024-10-24T12:24:14.019058Z","iopub.status.idle":"2024-10-24T12:24:14.043146Z","shell.execute_reply.started":"2024-10-24T12:24:14.019015Z","shell.execute_reply":"2024-10-24T12:24:14.042315Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"       id  u  alpha  Nt   Nx  Ny        theta_filename  \\\n0  219547  5    2.5   5  113  32  theta_K_id219547.dat   \n1  167403  5    2.5   5  113  32  theta_K_id167403.dat   \n2  225258  5    2.5   5  113  32  theta_K_id225258.dat   \n3  890407  5   25.0   5  113  32  theta_K_id890407.dat   \n4  352206  5   25.0   5  113  32  theta_K_id352206.dat   \n\n            ustar_filename      xi_filename  \n0  ustar_ms-1_id219547.dat  xi_id219547.dat  \n1  ustar_ms-1_id167403.dat  xi_id167403.dat  \n2  ustar_ms-1_id225258.dat  xi_id225258.dat  \n3  ustar_ms-1_id890407.dat  xi_id890407.dat  \n4  ustar_ms-1_id352206.dat  xi_id352206.dat  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>u</th>\n      <th>alpha</th>\n      <th>Nt</th>\n      <th>Nx</th>\n      <th>Ny</th>\n      <th>theta_filename</th>\n      <th>ustar_filename</th>\n      <th>xi_filename</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>219547</td>\n      <td>5</td>\n      <td>2.5</td>\n      <td>5</td>\n      <td>113</td>\n      <td>32</td>\n      <td>theta_K_id219547.dat</td>\n      <td>ustar_ms-1_id219547.dat</td>\n      <td>xi_id219547.dat</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>167403</td>\n      <td>5</td>\n      <td>2.5</td>\n      <td>5</td>\n      <td>113</td>\n      <td>32</td>\n      <td>theta_K_id167403.dat</td>\n      <td>ustar_ms-1_id167403.dat</td>\n      <td>xi_id167403.dat</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>225258</td>\n      <td>5</td>\n      <td>2.5</td>\n      <td>5</td>\n      <td>113</td>\n      <td>32</td>\n      <td>theta_K_id225258.dat</td>\n      <td>ustar_ms-1_id225258.dat</td>\n      <td>xi_id225258.dat</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>890407</td>\n      <td>5</td>\n      <td>25.0</td>\n      <td>5</td>\n      <td>113</td>\n      <td>32</td>\n      <td>theta_K_id890407.dat</td>\n      <td>ustar_ms-1_id890407.dat</td>\n      <td>xi_id890407.dat</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>352206</td>\n      <td>5</td>\n      <td>25.0</td>\n      <td>5</td>\n      <td>113</td>\n      <td>32</td>\n      <td>theta_K_id352206.dat</td>\n      <td>ustar_ms-1_id352206.dat</td>\n      <td>xi_id352206.dat</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#gets test set input\ndef getTestX(idx):\n    csv_file = test_df.reset_index().to_dict(orient='list')\n    dir_path = os.path.join(input_path, \"test\")\n    \n    id = csv_file['id'][idx]\n    nt, Nx, Ny = csv_file['Nt'][idx], csv_file['Nx'][idx], csv_file['Ny'][idx]\n    \n    theta = np.fromfile(os.path.join(dir_path, csv_file['theta_filename'][idx]), dtype=\"<f4\").reshape(nt, Nx, Ny)\n    ustar = np.fromfile(os.path.join(dir_path, csv_file['ustar_filename'][idx]), dtype=\"<f4\").reshape(nt, Nx, Ny)\n    xi_f = np.fromfile(os.path.join(dir_path, csv_file['xi_filename'][idx]), dtype=\"<f4\").reshape(nt, Nx, Ny)\n    \n    # Other parameters\n    uin = np.full_like(theta, np.array(csv_file['u'][idx]))\n    alpha = np.full_like(theta, np.array(csv_file['alpha'][idx]))\n    \n    # Stack all features together\n    X = np.stack([xi_f, theta, ustar, uin, alpha], axis=-1)\n\n    return id, X\n\n\n#predicts with input\ndef predict(idx,model):\n    id,X = getTestX(idx)\n    for channel in range(num_channels):\n        min_val = min_max_values[channel]['min']\n        max_val = min_max_values[channel]['max']\n        X[:, :, :, channel] = (X[:, :, :, channel] - min_val) / (max_val - min_val + 1e-6)  # Add a small constant to avoid division by zero\n    y_pred = model(X)\n    return id,y_pred\n\nfrom tqdm import tqdm\n\n#generates submission with model predictions already in SI units\ndef generate_submission(model):\n    y_preds = {}\n    ids = []\n    for idx in tqdm(range(len(test_df))):\n        id, y_pred = predict(idx, model) \n        #WARNING tmp should be in SI units\n        y_preds[id]= np.array(y_pred).flatten(order='C').astype(np.float32)\n        ids.append(id)\n    df = pd.DataFrame.from_dict(y_preds,orient='index')\n    df['id'] = ids\n\n    #move id to first column\n    cols = df.columns.tolist()\n    cols = cols[-1:] + cols[:-1]\n    df = df[cols]\n    #reset index\n    df = df.reset_index(drop=True)\n\n    return df","metadata":{"papermill":{"duration":0.042839,"end_time":"2024-10-23T11:36:27.519823","exception":false,"start_time":"2024-10-23T11:36:27.476984","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T12:24:14.044352Z","iopub.execute_input":"2024-10-24T12:24:14.044633Z","iopub.status.idle":"2024-10-24T12:24:14.058458Z","shell.execute_reply.started":"2024-10-24T12:24:14.044602Z","shell.execute_reply":"2024-10-24T12:24:14.057521Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"**Define model to do autoregressive prediction**","metadata":{"papermill":{"duration":0.026557,"end_time":"2024-10-23T11:36:27.572908","exception":false,"start_time":"2024-10-23T11:36:27.546351","status":"completed"},"tags":[]}},{"cell_type":"code","source":"class FireSpreadModel(tf.keras.Model):\n    def __init__(self, pre_trained_model, n_predictions=1):\n        super(FireSpreadModel, self).__init__()\n        self.pre_trained_model = pre_trained_model\n        self.n_predictions = n_predictions\n\n    def call(self, initial_data):\n        predictions = []\n        current_data = tf.expand_dims(initial_data, axis=0)  # Ensure batch dimension (1, time_steps, Nx, Ny, channels)\n        # current_data = tf.convert_to_tensor(current_data, dtype=tf.float32)  # Convert to tensor if needed\n\n        for _ in range(self.n_predictions):\n            pred = self.pre_trained_model(current_data)\n            pred = tf.squeeze(pred, axis=0)  # Remove the batch dimension\n\n            # Save the prediction (Channel 0: Fire)\n            predictions.append(pred[:, :, :, 0])\n\n            # Prepare the input for the next step\n            # Take last 5 data from prediction as new input\n            current_data = tf.expand_dims(pred[-(current_data.shape[1]):], axis=0)\n\n        # Stack the predictions along a new axis (n_predictions, time_steps, Nx, Ny)\n        predictions = tf.stack(predictions, axis=0)\n\n        # Reshape to (20, 113, 32)\n        predictions_reshaped = tf.reshape(predictions, (predictions.shape[0]*predictions.shape[1], 113, 32))\n        \n        return predictions_reshaped\n","metadata":{"papermill":{"duration":0.038051,"end_time":"2024-10-23T11:36:27.637703","exception":false,"start_time":"2024-10-23T11:36:27.599652","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T12:24:14.059738Z","iopub.execute_input":"2024-10-24T12:24:14.060113Z","iopub.status.idle":"2024-10-24T12:24:14.072095Z","shell.execute_reply.started":"2024-10-24T12:24:14.060073Z","shell.execute_reply":"2024-10-24T12:24:14.07119Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"**Predicting and create submission**","metadata":{"papermill":{"duration":0.026405,"end_time":"2024-10-23T11:36:27.691552","exception":false,"start_time":"2024-10-23T11:36:27.665147","status":"completed"},"tags":[]}},{"cell_type":"code","source":"fire_model = FireSpreadModel(model, n_predictions=1)\n\n# predict(0, loaded_model)\ndf = generate_submission(fire_model)\ndf.to_csv(os.path.join(output_path, 'submission.csv'),index=False)\nprint('Generating Submission file ... completed' )","metadata":{"papermill":{"duration":25.578065,"end_time":"2024-10-23T11:36:53.296323","exception":false,"start_time":"2024-10-23T11:36:27.718258","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T12:24:14.073251Z","iopub.execute_input":"2024-10-24T12:24:14.073537Z","iopub.status.idle":"2024-10-24T12:24:39.497442Z","shell.execute_reply.started":"2024-10-24T12:24:14.073508Z","shell.execute_reply":"2024-10-24T12:24:39.496518Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stderr","text":"100%|██████████| 27/27 [00:14<00:00,  1.81it/s]\n","output_type":"stream"},{"name":"stdout","text":"Generating Submission file ... completed\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Sampel of prediction result.**","metadata":{"papermill":{"duration":0.028572,"end_time":"2024-10-23T11:36:53.354257","exception":false,"start_time":"2024-10-23T11:36:53.325685","status":"completed"},"tags":[]}},{"cell_type":"code","source":"idx = 7\nfire_model = FireSpreadModel(model, n_predictions=4)","metadata":{"papermill":{"duration":0.037226,"end_time":"2024-10-23T11:36:53.420736","exception":false,"start_time":"2024-10-23T11:36:53.38351","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-24T12:24:39.498544Z","iopub.execute_input":"2024-10-24T12:24:39.498827Z","iopub.status.idle":"2024-10-24T12:24:39.504305Z","shell.execute_reply.started":"2024-10-24T12:24:39.498797Z","shell.execute_reply":"2024-10-24T12:24:39.503333Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"_, test_data = getTestX(idx)\ntest_data = test_data[:, :, :, 0] \n\n_, test_pred = predict(idx, fire_model)\ntest_pred = np.array(test_pred)\n\ntest_pred = np.concatenate([test_data, test_pred], axis=0)\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Initialize the image with the first frame\nim = ax.imshow(test_pred[0, :, :], cmap='hot', interpolation='nearest')\n\n# Add text element for frame number\nframe_text = ax.text(0.5, -0.1, '', transform=ax.transAxes, ha='center', fontsize=12, color='black')\n\n# Update function for the animation\ndef update(frame):\n    im.set_array(test_pred[frame, :, :])\n    \n    # Update the frame number text\n    frame_text.set_text(f'Frame: {frame + 1}/{test_pred.shape[0]}')\n    \n    return [im, frame_text]\n\n# Create the animation with an interval\nani = FuncAnimation(fig, update, frames=range(test_pred.shape[0]), interval=200, blit=True)\n\n# Save the animation as a GIF file\nani.save('animation.gif', writer='imagemagick')\n\n# Close the figure to prevent showing the last frame\nplt.close(fig)\n\n# Display the GIF in the notebook\nImage(url='animation.gif')","metadata":{"papermill":{"duration":6.847473,"end_time":"2024-10-23T11:37:00.297219","exception":false,"start_time":"2024-10-23T11:36:53.449746","status":"completed"},"tags":[],"jupyter":{"source_hidden":true},"execution":{"iopub.status.busy":"2024-10-24T12:24:39.50531Z","iopub.execute_input":"2024-10-24T12:24:39.505574Z","iopub.status.idle":"2024-10-24T12:24:46.383112Z","shell.execute_reply.started":"2024-10-24T12:24:39.505544Z","shell.execute_reply":"2024-10-24T12:24:46.382155Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/html":"<img src=\"animation.gif\"/>","text/plain":"<IPython.core.display.Image object>"},"metadata":{}}]}]}